#//////////////////////////////////////////////////////////////////////////////
#   -- MAGMA (version 1.1) --
#      Univ. of Tennessee, Knoxville
#      Univ. of California, Berkeley
#      Univ. of Colorado, Denver
#      November 2011
#//////////////////////////////////////////////////////////////////////////////

# GPU_TARGET specifies for which GPU you want to compile MAGMA:
#     "Tesla"  (NVIDIA compute capability 1.x cards)
#     "Fermi"  (NVIDIA compute capability 2.x cards)
#     "Kepler" (NVIDIA compute capability 3.x cards)
# See http://developer.nvidia.com/cuda-gpus

GPU_TARGET ?= Fermi

CC        = icc
NVCC      = nvcc
FORT      = ifort

ARCH      = ar
ARCHFLAGS = cr
RANLIB    = ranlib

OPTS      = -O3 -DADD_ -openmp -DMAGMA_WITH_MKL -DMAGMA_SETAFFINITY
F77OPTS   = -O3 -DADD_
FOPTS     = -O3 -DADD_
NVOPTS    = -O3 -DADD_ -Xcompiler -fno-strict-aliasing
LDOPTS    = -openmp

# old MKL
#LIB       = -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_lapack -lmkl_core -lguide -lpthread -lcublas -lcudart -lstdc++ -lm

# see MKL Link Advisor at http://software.intel.com/sites/products/mkl/
# icc with MKL 10.3
LIB       = -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -lpthread -lcublas -lcudart -lstdc++ -lm

# define library directories here or in your environment
# for MKL run, e.g.: source /opt/intel/composerxe/mkl/bin/mklvars.sh intel64
#MKLROOT   = /opt/intel/composerxe/mkl
#CUDADIR   = /usr/local/cuda

# check for directories and give user hint how to set them
ifeq ($(MKLROOT),)
    vars_sh  := $(shell which icc 2>/dev/null | perl -pe 's|/bin/\w+/icc|/mkl/bin/mklvars.sh|')
    vars_csh := $(shell which icc 2>/dev/null | perl -pe 's|/bin/\w+/icc|/mkl/bin/mklvars.csh|')
    ifeq ($(vars_sh),)
        vars_sh  := /opt/intel/composerxe/mkl/bin/mklvars.sh
        vars_csh := /opt/intel/composerxe/mkl/bin/mklvars.csh
    endif
$(error Define $$MKLROOT, preferably in your environment, e.g., run "source $(vars_sh) intel64" in ~/.bashrc, or "source $(vars_csh) intel64" in ~/.cshrc)
endif

ifeq ($(CUDADIR),)
    cuda := $(shell which nvcc | perl -pe 's|/bin/nvcc||')
    ifeq ($(cuda),)
        cuda := /usr/local/cuda
    endif
$(error Define $$CUDADIR, preferably in your environment, e.g., run "export CUDADIR=$(cuda)" in ~/.bashrc, or "setenv CUDADIR $(cuda)" in ~/.cshrc)
endif

LIBDIR    = -L$(MKLROOT)/lib/intel64 \
            -L$(CUDADIR)/lib64

INC       = -I$(CUDADIR)/include
