#//////////////////////////////////////////////////////////////////////////////
#   -- MAGMA (version 1.1) --
#      Univ. of Tennessee, Knoxville
#      Univ. of California, Berkeley
#      Univ. of Colorado, Denver
#      @date
#//////////////////////////////////////////////////////////////////////////////

# GPU_TARGET contains one or more of Tesla, Fermi, or Kepler,
# to specify for which GPUs you want to compile MAGMA:
#     Tesla  - NVIDIA compute capability 1.x cards
#     Fermi  - NVIDIA compute capability 2.x cards
#     Kepler - NVIDIA compute capability 3.x cards
# The default is all, "Tesla Fermi Kepler".
# See http://developer.nvidia.com/cuda-gpus
#
#GPU_TARGET ?= Tesla Fermi Kepler

CC        = gcc
NVCC      = nvcc
FORT      = gfortran

ARCH      = ar
ARCHFLAGS = cr
RANLIB    = ranlib

# use -m32 to compile with 32-bit long & pointers.
# use -m64 to compile with 64-bit long & pointers (lp64). int is still 32-bit.
# add -DNDEBUG to disable asserts and certain error checks.
# MacOS veclib has a bug where some single precision functions return
# a double precision result, for instance slange.
# This is observed with -m64, but oddly not with -m32.
# Adding -DLAPACK_RETURN_DOUBLE fixes the issue in include/magma_*lapack.h
# nvcc on MacOS Mavericks (10.9) currently (June 2014) has an issue with
# compiling -m32; use -m64.
OPTS      = -Wall -m64 -O3 -DADD_ -DLAPACK_RETURN_DOUBLE 
F77OPTS   = -Wall -m64 -O3 -DADD_ -DLAPACK_RETURN_DOUBLE 
FOPTS     = -Wall -m64 -O3 -DADD_ -DLAPACK_RETURN_DOUBLE -x f95-cpp-input
NVOPTS    =       -m64 -O3 -DADD_ -DLAPACK_RETURN_DOUBLE -Xcompiler -fno-strict-aliasing
LDOPTS    = -Wall -m64

LIB       = -framework Accelerate -lcublas -lcudart -lstdc++ -lm

# define library directories preferably in your environment, or here.
#CUDADIR ?= /usr/local/cuda
-include make.check-cuda

LIBDIR    = -L$(CUDADIR)/lib

INC       = -I$(CUDADIR)/include
