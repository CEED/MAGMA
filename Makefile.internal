#//////////////////////////////////////////////////////////////////////////////
#   -- MAGMA (version 1.1) --
#      Univ. of Tennessee, Knoxville
#      Univ. of California, Berkeley
#      Univ. of Colorado, Denver
#      @date
#//////////////////////////////////////////////////////////////////////////////

include $(MAGMA_DIR)/make.inc
-include $(MAGMA_DIR)/make.icl

#
# Set default values if they are not set in make.inc
#
PGIFORTRAN      ?= 0
GPU_TARGET      ?= Tesla Fermi Kepler
LIBMAGMA        ?= $(MAGMA_DIR)/lib/libmagma.a
LIBMAGMA_SPARSE ?= $(MAGMA_DIR)/lib/libmagma_sparse.a

prefix ?= /usr/local/magma

#
# Quark
#
#QUARKDIR ?= $(MAGMA_DIR)/quark
#INC += -I$(QUARKDIR)/include
#LIB += -L$(QUARKDIR)/lib -lquark

#
# NVCC options for the different cards
# sm_xx is binary, compute_xx is PTX for forward compatability
# MIN_ARCH is lowest requested version 
# NV_SM    accumulates sm_xx for all requested versions
# NV_COMP  is compute_xx for highest requested version
#
NV_SM    :=
NV_COMP  :=
ifneq ($(findstring Tesla, $(GPU_TARGET)),)
    MIN_ARCH ?= 100
    NV_SM    += -gencode arch=compute_13,code=sm_13 \
                -gencode arch=compute_10,code=compute_10
    NV_COMP  := -gencode arch=compute_13,code=compute_13
    #$(info compile for CUDA arch 1.x (Tesla))
endif
ifneq ($(findstring Fermi, $(GPU_TARGET)),)
    MIN_ARCH ?= 200
    NV_SM    += -gencode arch=compute_20,code=sm_20
    NV_COMP  := -gencode arch=compute_20,code=compute_20
    #$(info compile for CUDA arch 2.x (Fermi))
endif
ifneq ($(findstring Kepler, $(GPU_TARGET)),)
    MIN_ARCH ?= 300
    NV_SM    += -gencode arch=compute_30,code=sm_30 \
                -gencode arch=compute_35,code=sm_35
    NV_COMP  := -gencode arch=compute_35,code=compute_35
    #$(info compile for CUDA arch 3.x (Kepler))
endif
ifeq ($(NV_COMP),)
    $(error GPU_TARGET, currently $(GPU_TARGET), must contain one or more of Tesla, Fermi, or Kepler. Please edit your make.inc file)
endif
NVOPTS += -DHAVE_CUBLAS $(NV_SM) $(NV_COMP)
OPTS   += -DHAVE_CUBLAS -DMIN_CUDA_ARCH=$(MIN_ARCH)


LIBEXT = $(LIBDIR) $(LIB)

# Use Plasma to compile zgetfl and ztstrf
PLASMA = $(shell pkg-config --libs coreblas 2> /dev/null )
ifeq (1, $(words $(findstring coreblas, $(PLASMA))))
    OPTS    := $(OPTS) -DMAGMA_WITH_PLASMA
    INC     := $(INC) $(shell pkg-config --cflags-only-I coreblas)
    LIBEXT  := $(LIBEXT) $(shell pkg-config --libs coreblas)
    require := plasma
endif

# INC is all external include directories (CUDA, MKL, etc.).
# It is used for external programs that link with MAGMA, e.g., via pkgconfig.
# INC_MAGMA adds internal magma directories needed to compile magma itself.
INC_MAGMA = $(INC) -I$(MAGMA_DIR)/include -I$(MAGMA_DIR)/control

# Define the pointer size for fortran compilation
PTRFILE = $(MAGMA_DIR)/control/sizeptr.c
PTROBJ  = $(MAGMA_DIR)/control/sizeptr.o
PTREXEC = $(MAGMA_DIR)/control/sizeptr
PTRSIZE = $(shell $(PTREXEC))
PTROPT  = -Dmagma_devptr_t="integer(kind=$(PTRSIZE))"

$(PTREXEC): $(PTROBJ)
	$(CC) $(LDOPTS) -o $@ $<

# Add to F90 (FOPTS), not needed in F77OPTS
FOPTS += $(PTROPT)

#
# Rules to compile object files
#
.SUFFIXES:

%.i: %.cpp
	$(CC) $(OPTS) $(INC_MAGMA) -E $< -o $@

%.i: %.c
	$(CC) $(OPTS) $(INC_MAGMA) -E $< -o $@

%.i: %.cu
	$(NVCC) $(NVOPTS) $(INC_MAGMA) -E $< -o $@

# force headers to pre-process as C++
%.i: %.h
	$(CXX) $(OPTS) $(INC_MAGMA) -E $< -o $@

%.o: %.cpp
	$(CC) $(OPTS) $(INC_MAGMA) -c $< -o $@

%.o: %.c
	$(CC) $(OPTS) $(INC_MAGMA) -c $< -o $@

%.o: %.cu
	$(NVCC) $(NVOPTS) $(INC_MAGMA) -c $< -o $@

%.o: %.f90  $(PTREXEC)
	$(FORT) $(FOPTS) $(INC_MAGMA) -c $< -o $@

%.o: %.F90  $(PTREXEC)
	$(FORT) $(FOPTS) $(INC_MAGMA) -c $< -o $@

%.o: %.f
	$(FORT) $(F77OPTS) $(INC_MAGMA) -c $< -o $@

-include $(MAGMA_DIR)/Makefile.gen

# reset default goal
.DEFAULT_GOAL :=
