#//////////////////////////////////////////////////////////////////////////////
#   -- MAGMA (version 1.1) --
#      Univ. of Tennessee, Knoxville
#      Univ. of California, Berkeley
#      Univ. of Colorado, Denver
#      @date
#//////////////////////////////////////////////////////////////////////////////

include $(MAGMA_DIR)/make.inc
-include $(MAGMA_DIR)/make.icl

#
# Check if both new CFLAGS and deprecated OPTS are set -- causes havoc.
#
ifdef CFLAGS
  ifdef OPTS
    $(error Both CFLAGS and OPTS are defined. Update your make.inc file to use standard variables: CFLAGS, CXXFLAGS, FFLAGS, F90FLAGS, NVCCFLAGS, LDFLAGS, ARCHFLAGS.)
  endif
else
  ifndef OPTS
    $(error Neither CFLAGS nor OPTS are defined. Check your make.inc file.)
  endif
endif

#
# If CFLAGS, etc. are not set, use deprecated OPTS variable names
#
CXX             ?= $(CC)
CFLAGS          ?= $(OPTS)
FFLAGS          ?= $(F77OPTS)
F90FLAGS        ?= $(FOPTS)
NVCCFLAGS       ?= $(NVOPTS)
LDFLAGS         ?= $(LDOPTS)

#
# Extension for object files; o for unix, obj for Windows?
#
o_ext           ?= o

#
# If not set, make CXXFLAGS same as CFLAGS
#
CXXFLAGS        ?= $(CFLAGS)

#
# Assume CUBLAS
# This is also set in include/magma_types.h, but is needed before
# then for some testers (e.g., testing_zgemm) to include cublas_v2.h.
#
CFLAGS          += -DHAVE_CUBLAS
CXXFLAGS        += -DHAVE_CUBLAS

#
# Set default values if they are not set in make.inc
# We no longer compile Tesla (CUDA arch 1.x) by default, as nvcc 6.5 has deprecated it.
#
PGIFORTRAN      ?= 0
GPU_TARGET      ?= Fermi Kepler
LIBMAGMA        ?= $(MAGMA_DIR)/lib/libmagma.a
LIBMAGMA_SPARSE ?= $(MAGMA_DIR)/lib/libmagma_sparse.a
RPATH           ?= -Wl,-rpath,$(MAGMA_DIR)/lib
FORT            ?= no_fortran

prefix ?= /usr/local/magma

#
# Quark
#
#QUARKDIR ?= $(MAGMA_DIR)/quark
#INC += -I$(QUARKDIR)/include
#LIB += -L$(QUARKDIR)/lib -lquark

#
# NVCC options for the different cards
# First, add smXX for architecture names
#
ifneq ($(findstring Tesla, $(GPU_TARGET)),)
    # sm10 is no longer supported by CUDA 6.x nvcc
    GPU_TARGET += sm13
endif
ifneq ($(findstring Fermi, $(GPU_TARGET)),)
    GPU_TARGET += sm20
endif
ifneq ($(findstring Kepler, $(GPU_TARGET)),)
    GPU_TARGET += sm30 sm35
endif
ifneq ($(findstring Maxwell, $(GPU_TARGET)),)
    GPU_TARGET += sm50
endif

#
# Next, add compile options for specific smXX
# sm_xx is binary, compute_xx is PTX for forward compatability
# MIN_ARCH is lowest requested version 
# NV_SM    accumulates sm_xx for all requested versions
# NV_COMP  is compute_xx for highest requested version
#
# See also $(info compile for ...) in Makefile
#
NV_SM    :=
NV_COMP  :=

ifneq ($(findstring sm10, $(GPU_TARGET)),)
    # sm10 is no longer supported by CUDA 6.x nvcc
    MIN_ARCH ?= 100
    NV_SM    += -gencode arch=compute_10,code=sm_10
    NV_COMP  := -gencode arch=compute_10,code=compute_10
endif
ifneq ($(findstring sm13, $(GPU_TARGET)),)
    MIN_ARCH ?= 130
    NV_SM    += -gencode arch=compute_13,code=sm_13
    NV_COMP  := -gencode arch=compute_13,code=compute_13
endif
ifneq ($(findstring sm20, $(GPU_TARGET)),)
    MIN_ARCH ?= 200
    NV_SM    += -gencode arch=compute_20,code=sm_20
    NV_COMP  := -gencode arch=compute_20,code=compute_20
endif
ifneq ($(findstring sm30, $(GPU_TARGET)),)
    MIN_ARCH ?= 300
    NV_SM    += -gencode arch=compute_30,code=sm_30
    NV_COMP  := -gencode arch=compute_30,code=compute_30
endif
ifneq ($(findstring sm35, $(GPU_TARGET)),)
    MIN_ARCH ?= 350
    NV_SM    += -gencode arch=compute_35,code=sm_35
    NV_COMP  := -gencode arch=compute_35,code=compute_35
endif
ifneq ($(findstring sm50, $(GPU_TARGET)),)
    MIN_ARCH ?= 500
    NV_SM    += -gencode arch=compute_50,code=sm_50
    NV_COMP  := -gencode arch=compute_50,code=compute_50
endif
ifeq ($(NV_COMP),)
    $(error GPU_TARGET, currently $(GPU_TARGET), must contain one or more of Tesla, Fermi, Kepler, Maxwell, or sm{10,13,20,30,35,50}. Please edit your make.inc file)
endif
NVCCFLAGS += $(NV_SM) $(NV_COMP)
CFLAGS    += -DMIN_CUDA_ARCH=$(MIN_ARCH)
CXXFLAGS  += -DMIN_CUDA_ARCH=$(MIN_ARCH)

LIBEXT = $(LIBDIR) $(LIB)

# Use Plasma to compile zgetfl and ztstrf
PLASMA = $(shell pkg-config --libs coreblas 2> /dev/null )
ifeq (1, $(words $(findstring coreblas, $(PLASMA))))
    CFLAGS   += -DMAGMA_WITH_PLASMA
    CXXFLAGS += -DMAGMA_WITH_PLASMA
    INC      := $(INC) $(shell pkg-config --cflags-only-I coreblas)
    LIBEXT   := $(LIBEXT) $(shell pkg-config --libs coreblas)
    require  := plasma
endif

# INC is all external include directories (CUDA, MKL, etc.).
# It is used for external programs that link with MAGMA, e.g., via pkgconfig.
# CPPFLAGS adds internal MAGMA directories needed to compile MAGMA itself.
CPPFLAGS = $(INC) \
	-I$(MAGMA_DIR)/include \
	-I$(MAGMA_DIR)/control \
	-I$(MAGMA_DIR)/sparse-iter/include \
	-I$(MAGMA_DIR)/sparse-iter/control \

# check whether all FLAGS have -fPIC
have_fpic = $(and $(findstring -fPIC, $(CFLAGS)),   \
                  $(findstring -fPIC, $(CXXFLAGS)), \
                  $(findstring -fPIC, $(FFLAGS)),   \
                  $(findstring -fPIC, $(F90FLAGS)), \
                  $(findstring -fPIC, $(NVCCFLAGS)))

# Define the pointer size for fortran compilation
PTRFILE = $(MAGMA_DIR)/control/sizeptr.c
PTROBJ  = $(MAGMA_DIR)/control/sizeptr.$(o_ext)
PTREXEC = $(MAGMA_DIR)/control/sizeptr
PTRSIZE = $(shell $(PTREXEC))
PTROPT  = -Dmagma_devptr_t="integer(kind=$(PTRSIZE))"

$(PTREXEC): $(PTROBJ)
	$(CC) $(LDFLAGS) -o $@ $<

#
# Rules to compile object files
#
.SUFFIXES:

%.i: %.cpp
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -E $< -o $@

%.i: %.c
	$(CC) $(CFLAGS) $(CPPFLAGS) -E $< -o $@

%.i: %.cu
	$(NVCC) $(NVCCFLAGS) $(CPPFLAGS) -E $< -o $@

%.i: %.h
	$(CC) $(CFLAGS) $(CPPFLAGS) -E $< -o $@

%.$(o_ext): %.cpp
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c $< -o $@

%.$(o_ext): %.c
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $< -o $@

%.$(o_ext): %.cu
	$(NVCC) $(NVCCFLAGS) $(CPPFLAGS) -c $< -o $@

%.$(o_ext): %.f90  $(PTREXEC)
	$(FORT) $(F90FLAGS) $(PTROPT) $(CPPFLAGS) -c $< -o $@

%.$(o_ext): %.F90  $(PTREXEC)
	$(FORT) $(F90FLAGS) $(PTROPT) $(CPPFLAGS) -c $< -o $@

%.$(o_ext): %.f
	$(FORT) $(FFLAGS) $(CPPFLAGS) -c $< -o $@

-include $(MAGMA_DIR)/Makefile.gen

# reset default goal
.DEFAULT_GOAL :=
