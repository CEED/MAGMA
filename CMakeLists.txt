cmake_minimum_required( VERSION 2.8.1 )

project( MAGMA C CXX Fortran )


# ----------------------------------------
# to show compile commands, set this here or use 'make VERBOSE=1'
#set(CMAKE_VERBOSE_MAKEFILE on)


# ----------------------------------------
# force an out-of-source build, to not overwrite the existing Makefiles
# (out-of-source is cleaner, too)
string( COMPARE EQUAL "${CMAKE_SOURCE_DIR}" "${CMAKE_BINARY_DIR}" MAGMA_COMPILE_INPLACE )
if( MAGMA_COMPILE_INPLACE )
	message(FATAL_ERROR "Compiling MAGMA with CMake requires an out-of-source build. To proceed:
  rm -rf CMakeCache.txt CMakeFiles/   # delete files in ${CMAKE_SOURCE_DIR}
  mkdir build
  cd build
  cmake ..
  make" )
endif()


# ----------------------------------------
# check Fortran name mangling
include( FortranCInterface )
FortranCInterface_HEADER( ${CMAKE_SOURCE_DIR}/mangling.h MACRO_NAMESPACE MAGMA_ )


# ----------------------------------------
# locate OpenMP
find_package( OpenMP )
if ( OPENMP_FOUND )
	message( "-- Found OpenMP" )
	message( "   OpenMP_C_FLAGS   ${OpenMP_C_FLAGS}" )
	message( "   OpenMP_CXX_FLAGS ${OpenMP_CXX_FLAGS}" )
	set( CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}"   )
	set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}" )
endif()


# ----------------------------------------
# locate CUDA libraries
option( USE_TESLA OFF )
find_package( CUDA )
if ( CUDA_FOUND )
	message( "-- Found CUDA ${CUDA_VERSION}" )
	message( "   CUDA_INCLUDE_DIRS:   ${CUDA_INCLUDE_DIRS}"   )
	message( "   CUDA_CUDART_LIBRARY: ${CUDA_CUDART_LIBRARY}" )
	#message( "   CUDA_LIBRARIES: ${CUDA_LIBRARIES}" )
	#message( "   CUDA_CUBLAS_LIBRARIES: ${CUDA_CUBLAS_LIBRARIES}" )
	include_directories( ${CUDA_INCLUDE_DIRS} )
	add_definitions( -DHAVE_CUBLAS )
	if ( USE_TESLA )
		message( "-- Generate CUDA code for Tesla (CUDA architecture 1.x). To change, unset USE_TESLA using ccmake." )
		add_definitions( -DGPUSHMEM=130 )
		set( CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -gencode arch=compute_13,code=sm_13 -gencode arch=compute_13,code=compute_13" )
	else()
		message( "-- Generate CUDA code for Fermi (CUDA architecture 2.x). To change, set USE_TESLA using ccmake." )
		add_definitions( -DGPUSHMEM=200 )
		set( CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -gencode arch=compute_20,code=sm_20 -gencode arch=compute_20,code=compute_20" )
	endif()
endif()


# ----------------------------------------
# locate LAPACK libraries
set( LAPACK_LIBRARIES "" CACHE STRING "Libraries for LAPACK and BLAS, to manually override search" )
if ( "${LAPACK_LIBRARIES}" STREQUAL "" )
	message( "-- Searching for BLAS and LAPACK. To override, set LAPACK_LIBRARIES using ccmake." )
	find_package( LAPACK )
else()
	message( "-- User set LAPACK_LIBRARIES. To change, edit LAPACK_LIBRARIES using ccmake (set to empty to enable search)." )
endif()
message( "   BLAS_LIBRARIES:      ${BLAS_LIBRARIES}"      )
message( "   LAPACK_LIBRARIES:    ${LAPACK_LIBRARIES}"    )

# If using MKL, add it to includes and define MAGMA_WITH_MKL
# Initially, this gets MKLROOT from environment, but then the user can edit it.
set( MKLROOT $ENV{MKLROOT} CACHE STRING "MKL installation directory" )
if ( NOT "${MKLROOT}" STREQUAL "" )
	message( "-- MKLROOT set to ${MKLROOT}. To change, edit MKLROOT using ccmake." )
	include_directories( ${MKLROOT}/include )
	add_definitions( -DMAGMA_WITH_MKL )
else()
	message( "-- MKLROOT not set. To change, set MKLROOT using ccmake." )
endif()


# ----------------------------------------
# common flags
# On Windows:
#     Strip out /W3; we will use -W4
#     -Wall is way too verbose; use -W4
#     -MP enables parallel builds
#     -std=c99 is not implemented, so skip that
if ( WIN32 )
	string( REGEX REPLACE " */W3" "" CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}"   )
	string( REGEX REPLACE " */W3" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}" )
	set( CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -W4 -MP" )
	set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -W4 -MP" )
else()
	set( CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -Wall -std=c99" )
	set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall" )
endif()

if ( CMAKE_HOST_APPLE )
	# 64-bit veclib has issues, so compile 32-bit.
	# (I think an issue with prototypes return float instead of double)
	message( "-- MacOS X: setting to 32-bit, to avoid issues with 64-bit veclib" )
	set( CMAKE_C_FLAGS       "${CMAKE_C_FLAGS} -m32" )
	set( CMAKE_CXX_FLAGS     "${CMAKE_CXX_FLAGS} -m32" )
	set( CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -m32" )
	set( CUDA_64_BIT_DEVICE_CODE OFF )
endif()

include_directories( include )
include_directories( control )

message( "-- Flags" )
message( "   CFLAGS   ${CMAKE_C_FLAGS}" )
message( "   CXXFLAGS ${CMAKE_CXX_FLAGS}" )
message( "   NFLAGS   ${CUDA_NVCC_FLAGS}" )
message( "   FFLAGS   ${CMAKE_Fortran_FLAGS}" )


# ----------------------------------------
# where to put libmagma
set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY lib )
set( CMAKE_LIBRARY_OUTPUT_DIRECTORY lib )


# ----------------------------------------
# compile library
include( ${CMAKE_SOURCE_DIR}/src/CMake )
include( ${CMAKE_SOURCE_DIR}/control/CMake )
include( ${CMAKE_SOURCE_DIR}/magmablas/CMake )
include( ${CMAKE_SOURCE_DIR}/interface_cuda/CMake )
cuda_add_library( magma
	${src_ALLSRC}
	${control_ALLSRC}
	${magmablas_ALLSRC}
	${interface_cuda_ALLSRC}
)
target_link_libraries( magma
	${LAPACK_LIBRARIES}
	${CUDA_CUDART_LIBRARY}
	${CUDA_CUBLAS_LIBRARIES}
)


# ----------------------------------------
# compile testing library
set( TEST_SRC
	testing/testing_zutil.cpp
	testing/testing_cutil.cpp
	testing/testing_dutil.cpp
	testing/testing_sutil.cpp
	testing/testing_util.cpp
)
add_library( test ${TEST_SRC} )


# ----------------------------------------
# compile lapacktest library
include( ${CMAKE_SOURCE_DIR}/testing/lin/CMake )
add_library( lapacktest ${testing_lin_ALLSRC} )


# ----------------------------------------
# compile each tester
set( CMAKE_RUNTIME_OUTPUT_DIRECTORY testing )
include( ${CMAKE_SOURCE_DIR}/testing/CMake )
foreach( TEST ${testing_ALLSRC} )
	string( REGEX REPLACE "\\.(cpp|f90|F90)" "" EXE ${TEST} )
	string( REGEX REPLACE "testing/" "" EXE ${EXE} )
	#message( "${TEST} --> ${EXE}" )
	add_executable( ${EXE} ${TEST} )
	target_link_libraries( ${EXE} test lapacktest magma )
endforeach()
