#//////////////////////////////////////////////////////////////////////////////
#   -- MAGMA (version 1.1) --
#      Univ. of Tennessee, Knoxville
#      Univ. of California, Berkeley
#      Univ. of Colorado, Denver
#      @date
#//////////////////////////////////////////////////////////////////////////////

DIR = control
MAGMA_DIR = ..
include $(MAGMA_DIR)/Makefile.internal

ZSRC := \
	magma_znan_inf.cpp	\
	zpanel_to_q.cpp	\
	zprint.cpp	\
	magma_zbulge.cpp	\

# PGI support has not been updated in several years
##ifeq ($(PGIFORTRAN), 0)
ZSRC += \
	magma_f77.cpp		\
	magma_param.F90		\
	magma.F90
##else
##ZSRC += \
##	magma_zf77pgi.cpp
##endif

# alphabetic order
SRC := \
	abs.cpp				\
	affinity.cpp		\
	auxiliary.cpp		\
	magma_bulge.cpp		\
	connection_mgpu.cpp	\
	constants.cpp		\
	get_batched_crossover.cpp		\
	get_batched_gemm_decision.cpp	\
	get_nb.cpp		\
	magma_threadsetting.cpp	\
	magma_timer.cpp		\
	magma_yield.cpp		\
	magma_winthread.cpp	\
	pthread_barrier.cpp	\
	strlcpy.cpp		\
	sqrt.cpp		\
	thread_queue.cpp	\
	trace.cpp		\
	xerbla.cpp		\

# ilaenv was previously used by gesdd; it was the only required Fortran dependence
#	ilaenv_f77.f		\
#	ilaenv.cpp		\

# Fortran wrappers are generated by 'make wrappers'
# They don't directly use precision generation;
# the headers that they are generated from use precision generation.
# SRC2 is used for dependencies to compile Fortran files in correct order.
SRC2 := \
	magma_sfortran.F90	\
	magma_dfortran.F90	\
	magma_cfortran.F90	\
	magma_zfortran.F90	\
	magma_dsfortran.F90	\
	magma_zcfortran.F90	\
	magmablas_sfortran.F90	\
	magmablas_dfortran.F90	\
	magmablas_cfortran.F90	\
	magmablas_zfortran.F90	\
	magmablas_dsfortran.F90	\
	magmablas_zcfortran.F90	\

SRC += \
	magma_sf77.cpp		\
	magma_df77.cpp		\
	magma_cf77.cpp		\
	magma_zf77.cpp		\
	magma_dsf77.cpp		\
	magma_zcf77.cpp		\
	magmablas_sf77.cpp	\
	magmablas_df77.cpp	\
	magmablas_cf77.cpp	\
	magmablas_zf77.cpp	\
	magmablas_dsf77.cpp	\
	magmablas_zcf77.cpp	\
	$(SRC2)				\

# ------------------------------------------------------------
-include Makefile.local
-include Makefile.src

ALLSRC := $(ZSRC) $(CSRC) $(DSRC) $(SSRC) $(SRC)

ALLOBJ := $(ALLSRC:.cpp=.$(o_ext))
ALLOBJ := $(filter %.$(o_ext), $(ALLOBJ))

FOBJ   := $(ALLSRC:.f90=.$(o_ext))
FOBJ   := $(FOBJ:.F90=.$(o_ext))
FOBJ   := $(FOBJ:.f=.$(o_ext))
FOBJ   := $(filter %.$(o_ext), $(FOBJ))

ifneq ($(FORT),no_fortran)
    ALLOBJ += $(FOBJ)
endif

.PHONY: all clean cleanall

.DEFAULT_GOAL := all
all: $(LIBMAGMA)

$(LIBMAGMA): $(ALLOBJ) stamp
	$(ARCH) $(ARCHFLAGS) $@ $(ALLOBJ)
	$(RANLIB) $@
	-cp *.mod ../include

# this forces LIBMAGMA to be archived
stamp: $(ALLOBJ)
	touch $@

clean:
	rm -f *.$(o_ext) *~ *.linkinfo *.mod ../include/*.mod sizeptr stamp

cleanall: clean
	rm -f $(LIBMAGMA)

# e.g., change magma_zfortran.F90 to ../include/magma_z.i
PRE2 := $(patsubst %fortran.F90,../include/%.i,$(SRC2))

# e.g., generate magma_zfortran.F90 and magma_zf77.cpp from ../include/magma_z.i
wrappers: $(PRE2)
	for pre in $(PRE2); do \
		../tools/fortran_wrappers.pl $$pre; \
	done
	rm $(PRE2)

# Extra dependencies to compile Fortran files in correct order to get .mod files
OBJ2 := $(SRC2:.F90=.$(o_ext))

magma.$(o_ext): $(OBJ2)

$(OBJ2): magma_param.$(o_ext)
